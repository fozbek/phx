#!/usr/bin/env php
<?php

include __DIR__ . '/vendor/autoload.php';

use Composer\Console\Application;
use Symfony\Component\Console\Application as SymfonyConsoleApplication;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Process\Exception\ProcessFailedException;
use Symfony\Component\Process\Process;

class PhxCommand extends Command
{
    protected function configure()
    {
        $this
            ->setDescription('Run PHX')
            ->setName('phx')
            ->addArgument('package', InputArgument::REQUIRED, 'Package to run');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $packageName = $input->getArgument('package');
        $process = new Process(['composer', 'global', 'require', $packageName]);
        $process->run();

        // todo: temp solution, fix this
        $parts = explode('/', $packageName);
        $executableName = end($parts);

        $process2 = new Process(['composer', 'global', 'exec', $executableName]);
        $process2->run();

        if (!$process->isSuccessful()) {
            throw new ProcessFailedException($process);
        }

        if (!$process2->isSuccessful()) {
            throw new ProcessFailedException($process2);
        }

        $output->writeln($process2->getOutput());

        return Command::SUCCESS;
    }
}


$application = new SymfonyConsoleApplication('PHX', '0.0.1');

$command = new PhxCommand();
$application->add($command);
$application->setDefaultCommand($command->getName(), true);

$application->run();
